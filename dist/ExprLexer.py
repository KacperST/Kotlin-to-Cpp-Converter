# Generated from Expr.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,66,430,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
        1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,
        1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,4,50,315,8,50,11,50,
        12,50,316,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,5,56,352,8,56,10,56,
        12,56,355,9,56,1,57,3,57,358,8,57,1,57,1,57,5,57,362,8,57,10,57,
        12,57,365,9,57,1,57,3,57,368,8,57,1,58,4,58,371,8,58,11,58,12,58,
        372,1,58,1,58,4,58,377,8,58,11,58,12,58,378,1,59,1,59,1,59,1,60,
        1,60,1,60,1,60,1,60,3,60,389,8,60,5,60,391,8,60,10,60,12,60,394,
        9,60,1,61,1,61,1,61,1,61,1,61,3,61,401,8,61,3,61,403,8,61,1,61,1,
        61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,416,8,62,1,
        63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,0,
        0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
        131,66,1,0,4,2,0,10,10,13,13,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,4,0,10,10,13,13,34,34,92,92,442,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
        0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,1,
        133,1,0,0,0,3,137,1,0,0,0,5,139,1,0,0,0,7,141,1,0,0,0,9,143,1,0,
        0,0,11,145,1,0,0,0,13,148,1,0,0,0,15,150,1,0,0,0,17,153,1,0,0,0,
        19,156,1,0,0,0,21,158,1,0,0,0,23,160,1,0,0,0,25,163,1,0,0,0,27,166,
        1,0,0,0,29,169,1,0,0,0,31,172,1,0,0,0,33,175,1,0,0,0,35,177,1,0,
        0,0,37,179,1,0,0,0,39,181,1,0,0,0,41,183,1,0,0,0,43,185,1,0,0,0,
        45,187,1,0,0,0,47,189,1,0,0,0,49,191,1,0,0,0,51,193,1,0,0,0,53,195,
        1,0,0,0,55,198,1,0,0,0,57,201,1,0,0,0,59,204,1,0,0,0,61,207,1,0,
        0,0,63,210,1,0,0,0,65,213,1,0,0,0,67,215,1,0,0,0,69,218,1,0,0,0,
        71,223,1,0,0,0,73,227,1,0,0,0,75,233,1,0,0,0,77,240,1,0,0,0,79,247,
        1,0,0,0,81,252,1,0,0,0,83,261,1,0,0,0,85,267,1,0,0,0,87,274,1,0,
        0,0,89,282,1,0,0,0,91,292,1,0,0,0,93,296,1,0,0,0,95,300,1,0,0,0,
        97,304,1,0,0,0,99,310,1,0,0,0,101,314,1,0,0,0,103,318,1,0,0,0,105,
        322,1,0,0,0,107,329,1,0,0,0,109,334,1,0,0,0,111,341,1,0,0,0,113,
        349,1,0,0,0,115,367,1,0,0,0,117,370,1,0,0,0,119,380,1,0,0,0,121,
        383,1,0,0,0,123,395,1,0,0,0,125,415,1,0,0,0,127,417,1,0,0,0,129,
        419,1,0,0,0,131,424,1,0,0,0,133,134,5,32,0,0,134,135,1,0,0,0,135,
        136,6,0,0,0,136,2,1,0,0,0,137,138,5,43,0,0,138,4,1,0,0,0,139,140,
        5,45,0,0,140,6,1,0,0,0,141,142,5,42,0,0,142,8,1,0,0,0,143,144,5,
        47,0,0,144,10,1,0,0,0,145,146,5,46,0,0,146,147,5,46,0,0,147,12,1,
        0,0,0,148,149,5,37,0,0,149,14,1,0,0,0,150,151,5,43,0,0,151,152,5,
        43,0,0,152,16,1,0,0,0,153,154,5,45,0,0,154,155,5,45,0,0,155,18,1,
        0,0,0,156,157,5,46,0,0,157,20,1,0,0,0,158,159,5,61,0,0,159,22,1,
        0,0,0,160,161,5,43,0,0,161,162,5,61,0,0,162,24,1,0,0,0,163,164,5,
        45,0,0,164,165,5,61,0,0,165,26,1,0,0,0,166,167,5,42,0,0,167,168,
        5,61,0,0,168,28,1,0,0,0,169,170,5,47,0,0,170,171,5,61,0,0,171,30,
        1,0,0,0,172,173,5,37,0,0,173,174,5,61,0,0,174,32,1,0,0,0,175,176,
        5,58,0,0,176,34,1,0,0,0,177,178,5,44,0,0,178,36,1,0,0,0,179,180,
        5,40,0,0,180,38,1,0,0,0,181,182,5,41,0,0,182,40,1,0,0,0,183,184,
        5,91,0,0,184,42,1,0,0,0,185,186,5,93,0,0,186,44,1,0,0,0,187,188,
        5,123,0,0,188,46,1,0,0,0,189,190,5,125,0,0,190,48,1,0,0,0,191,192,
        5,60,0,0,192,50,1,0,0,0,193,194,5,62,0,0,194,52,1,0,0,0,195,196,
        5,60,0,0,196,197,5,61,0,0,197,54,1,0,0,0,198,199,5,62,0,0,199,200,
        5,61,0,0,200,56,1,0,0,0,201,202,5,61,0,0,202,203,5,61,0,0,203,58,
        1,0,0,0,204,205,5,33,0,0,205,206,5,61,0,0,206,60,1,0,0,0,207,208,
        5,38,0,0,208,209,5,38,0,0,209,62,1,0,0,0,210,211,5,124,0,0,211,212,
        5,124,0,0,212,64,1,0,0,0,213,214,5,39,0,0,214,66,1,0,0,0,215,216,
        5,105,0,0,216,217,5,102,0,0,217,68,1,0,0,0,218,219,5,101,0,0,219,
        220,5,108,0,0,220,221,5,115,0,0,221,222,5,101,0,0,222,70,1,0,0,0,
        223,224,5,102,0,0,224,225,5,111,0,0,225,226,5,114,0,0,226,72,1,0,
        0,0,227,228,5,119,0,0,228,229,5,104,0,0,229,230,5,105,0,0,230,231,
        5,108,0,0,231,232,5,101,0,0,232,74,1,0,0,0,233,234,5,114,0,0,234,
        235,5,101,0,0,235,236,5,116,0,0,236,237,5,117,0,0,237,238,5,114,
        0,0,238,239,5,110,0,0,239,76,1,0,0,0,240,241,5,100,0,0,241,242,5,
        111,0,0,242,243,5,119,0,0,243,244,5,110,0,0,244,245,5,84,0,0,245,
        246,5,111,0,0,246,78,1,0,0,0,247,248,5,115,0,0,248,249,5,116,0,0,
        249,250,5,101,0,0,250,251,5,112,0,0,251,80,1,0,0,0,252,253,5,99,
        0,0,253,254,5,111,0,0,254,255,5,110,0,0,255,256,5,116,0,0,256,257,
        5,105,0,0,257,258,5,110,0,0,258,259,5,117,0,0,259,260,5,101,0,0,
        260,82,1,0,0,0,261,262,5,98,0,0,262,263,5,114,0,0,263,264,5,101,
        0,0,264,265,5,97,0,0,265,266,5,107,0,0,266,84,1,0,0,0,267,268,5,
        112,0,0,268,269,5,117,0,0,269,270,5,98,0,0,270,271,5,108,0,0,271,
        272,5,105,0,0,272,273,5,99,0,0,273,86,1,0,0,0,274,275,5,112,0,0,
        275,276,5,114,0,0,276,277,5,105,0,0,277,278,5,118,0,0,278,279,5,
        97,0,0,279,280,5,116,0,0,280,281,5,101,0,0,281,88,1,0,0,0,282,283,
        5,112,0,0,283,284,5,114,0,0,284,285,5,111,0,0,285,286,5,116,0,0,
        286,287,5,101,0,0,287,288,5,99,0,0,288,289,5,116,0,0,289,290,5,101,
        0,0,290,291,5,100,0,0,291,90,1,0,0,0,292,293,5,102,0,0,293,294,5,
        117,0,0,294,295,5,110,0,0,295,92,1,0,0,0,296,297,5,118,0,0,297,298,
        5,97,0,0,298,299,5,108,0,0,299,94,1,0,0,0,300,301,5,118,0,0,301,
        302,5,97,0,0,302,303,5,114,0,0,303,96,1,0,0,0,304,305,5,99,0,0,305,
        306,5,108,0,0,306,307,5,97,0,0,307,308,5,115,0,0,308,309,5,115,0,
        0,309,98,1,0,0,0,310,311,5,105,0,0,311,312,5,110,0,0,312,100,1,0,
        0,0,313,315,7,0,0,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,1,0,
        0,0,316,317,1,0,0,0,317,102,1,0,0,0,318,319,5,73,0,0,319,320,5,110,
        0,0,320,321,5,116,0,0,321,104,1,0,0,0,322,323,5,68,0,0,323,324,5,
        111,0,0,324,325,5,117,0,0,325,326,5,98,0,0,326,327,5,108,0,0,327,
        328,5,101,0,0,328,106,1,0,0,0,329,330,5,67,0,0,330,331,5,104,0,0,
        331,332,5,97,0,0,332,333,5,114,0,0,333,108,1,0,0,0,334,335,5,83,
        0,0,335,336,5,116,0,0,336,337,5,114,0,0,337,338,5,105,0,0,338,339,
        5,110,0,0,339,340,5,103,0,0,340,110,1,0,0,0,341,342,5,66,0,0,342,
        343,5,111,0,0,343,344,5,111,0,0,344,345,5,108,0,0,345,346,5,101,
        0,0,346,347,5,97,0,0,347,348,5,110,0,0,348,112,1,0,0,0,349,353,7,
        1,0,0,350,352,7,2,0,0,351,350,1,0,0,0,352,355,1,0,0,0,353,351,1,
        0,0,0,353,354,1,0,0,0,354,114,1,0,0,0,355,353,1,0,0,0,356,358,5,
        45,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,363,2,
        49,57,0,360,362,2,48,57,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,
        1,0,0,0,363,364,1,0,0,0,364,368,1,0,0,0,365,363,1,0,0,0,366,368,
        5,48,0,0,367,357,1,0,0,0,367,366,1,0,0,0,368,116,1,0,0,0,369,371,
        2,48,57,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,374,1,0,0,0,374,376,5,46,0,0,375,377,2,48,57,0,376,375,
        1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,118,
        1,0,0,0,380,381,3,121,60,0,381,382,5,34,0,0,382,120,1,0,0,0,383,
        392,5,34,0,0,384,391,8,3,0,0,385,388,5,92,0,0,386,389,9,0,0,0,387,
        389,5,0,0,1,388,386,1,0,0,0,388,387,1,0,0,0,389,391,1,0,0,0,390,
        384,1,0,0,0,390,385,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,
        393,1,0,0,0,393,122,1,0,0,0,394,392,1,0,0,0,395,402,5,34,0,0,396,
        403,8,3,0,0,397,400,5,92,0,0,398,401,9,0,0,0,399,401,5,0,0,1,400,
        398,1,0,0,0,400,399,1,0,0,0,401,403,1,0,0,0,402,396,1,0,0,0,402,
        397,1,0,0,0,403,404,1,0,0,0,404,405,5,34,0,0,405,124,1,0,0,0,406,
        407,5,116,0,0,407,408,5,114,0,0,408,409,5,117,0,0,409,416,5,101,
        0,0,410,411,5,102,0,0,411,412,5,97,0,0,412,413,5,108,0,0,413,414,
        5,115,0,0,414,416,5,101,0,0,415,406,1,0,0,0,415,410,1,0,0,0,416,
        126,1,0,0,0,417,418,2,48,57,0,418,128,1,0,0,0,419,420,5,110,0,0,
        420,421,5,117,0,0,421,422,5,108,0,0,422,423,5,108,0,0,423,130,1,
        0,0,0,424,425,5,112,0,0,425,426,5,114,0,0,426,427,5,105,0,0,427,
        428,5,110,0,0,428,429,5,116,0,0,429,132,1,0,0,0,14,0,316,353,357,
        363,367,372,378,388,390,392,400,402,415,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    ADD = 2
    SUBSTRACT = 3
    MULTIPLY = 4
    DIVIDE = 5
    RANGE = 6
    MOD = 7
    INCR = 8
    DECR = 9
    DOT = 10
    EQ = 11
    ADD_ASSIGNMENT = 12
    SUB_ASSIGNMENT = 13
    MULT_ASSIGNMENT = 14
    DIV_ASSIGNMENT = 15
    MOD_ASSIGNMENT = 16
    COLON = 17
    COMA = 18
    LPAREN = 19
    RPAREN = 20
    LSQUARE = 21
    RSQUARE = 22
    LCURL = 23
    RCURL = 24
    LTHAN = 25
    GTHAN = 26
    LE = 27
    GE = 28
    EQEQ = 29
    NOTEQ = 30
    AND = 31
    OR = 32
    SINGLE_QUOTE = 33
    IF = 34
    ELSE = 35
    FOR = 36
    WHILE = 37
    RETURN = 38
    DOWNTO = 39
    STEP = 40
    CONTINUE = 41
    BREAK = 42
    PUBLIC = 43
    PRIVATE = 44
    PROTECTED = 45
    FUN = 46
    VAL = 47
    VAR = 48
    CLASS = 49
    IN = 50
    NEWLINE = 51
    INT = 52
    DOUBLE = 53
    CHAR = 54
    STRING = 55
    BOOLEAN = 56
    IDENTIFIER = 57
    INTLITERAL = 58
    DOUBLELITERAL = 59
    STRINGLITERAL = 60
    UNTERMINATEDSTRINGLITERAL = 61
    CHARLITERAL = 62
    BOOLEANLITERAL = 63
    INTNUMBER = 64
    NULL = 65
    PRINT = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "' '", "'+'", "'-'", "'*'", "'/'", "'..'", "'%'", "'++'", "'--'", 
            "'.'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "':'", 
            "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
            "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'''", "'if'", 
            "'else'", "'for'", "'while'", "'return'", "'downTo'", "'step'", 
            "'continue'", "'break'", "'public'", "'private'", "'protected'", 
            "'fun'", "'val'", "'var'", "'class'", "'in'", "'Int'", "'Double'", 
            "'Char'", "'String'", "'Boolean'", "'null'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", "RANGE", "MOD", 
            "INCR", "DECR", "DOT", "EQ", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", 
            "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "COLON", 
            "COMA", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
            "LTHAN", "GTHAN", "LE", "GE", "EQEQ", "NOTEQ", "AND", "OR", 
            "SINGLE_QUOTE", "IF", "ELSE", "FOR", "WHILE", "RETURN", "DOWNTO", 
            "STEP", "CONTINUE", "BREAK", "PUBLIC", "PRIVATE", "PROTECTED", 
            "FUN", "VAL", "VAR", "CLASS", "IN", "NEWLINE", "INT", "DOUBLE", 
            "CHAR", "STRING", "BOOLEAN", "IDENTIFIER", "INTLITERAL", "DOUBLELITERAL", 
            "STRINGLITERAL", "UNTERMINATEDSTRINGLITERAL", "CHARLITERAL", 
            "BOOLEANLITERAL", "INTNUMBER", "NULL", "PRINT" ]

    ruleNames = [ "WS", "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", "RANGE", 
                  "MOD", "INCR", "DECR", "DOT", "EQ", "ADD_ASSIGNMENT", 
                  "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", 
                  "MOD_ASSIGNMENT", "COLON", "COMA", "LPAREN", "RPAREN", 
                  "LSQUARE", "RSQUARE", "LCURL", "RCURL", "LTHAN", "GTHAN", 
                  "LE", "GE", "EQEQ", "NOTEQ", "AND", "OR", "SINGLE_QUOTE", 
                  "IF", "ELSE", "FOR", "WHILE", "RETURN", "DOWNTO", "STEP", 
                  "CONTINUE", "BREAK", "PUBLIC", "PRIVATE", "PROTECTED", 
                  "FUN", "VAL", "VAR", "CLASS", "IN", "NEWLINE", "INT", 
                  "DOUBLE", "CHAR", "STRING", "BOOLEAN", "IDENTIFIER", "INTLITERAL", 
                  "DOUBLELITERAL", "STRINGLITERAL", "UNTERMINATEDSTRINGLITERAL", 
                  "CHARLITERAL", "BOOLEANLITERAL", "INTNUMBER", "NULL", 
                  "PRINT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


